/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.biopark.queijos.atualizador;

import br.biopark.queijos.atualizador.enumerator.EPropertie;
import br.biopark.queijos.atualizador.util.Downloader;
import br.biopark.queijos.atualizador.util.FlywayDatabase;
import br.biopark.queijos.atualizador.util.PropFile;
import br.biopark.queijos.atualizador.util.UnzipFiles;
import br.biopark.queijos.atualizador.util.Util;
import java.io.IOException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JProgressBar;

/**
 *
 * @author Renato
 */
public class Progress extends javax.swing.JFrame {

    private static Util util = new Util();
    private static PropFile prop = new PropFile();
    private static FlywayDatabase flywayDb = new FlywayDatabase();
    private static Downloader downloader = new Downloader();

    private static Progress INSTANCE;

    private Progress() {
        initComponents();
    }

    public static Progress getInstance() {
        return INSTANCE == null ? INSTANCE = new Progress() : INSTANCE;
    }

    //private static String urlBase = "https://github.com/renatofritola/Loteria/releases/download/v";
    private static Progress progress = getInstance();

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        lbVersao1 = new javax.swing.JLabel();
        lbVersao = new javax.swing.JLabel();
        lbVersaoNova = new javax.swing.JLabel();
        lbVersao2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        lbStatus = new javax.swing.JLabel();
        jpProgress = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Atualização Queijos");
        setAlwaysOnTop(true);
        setAutoRequestFocus(false);
        setBackground(new java.awt.Color(255, 255, 255));
        setUndecorated(true);
        setResizable(false);

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, " Versões ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

        lbVersao1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lbVersao1.setText("Atual");

        lbVersao.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lbVersao.setText("1.0.0");

        lbVersaoNova.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        lbVersao2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lbVersao2.setText("Nova");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(lbVersao1, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbVersao, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(56, 56, 56)
                .addComponent(lbVersao2, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lbVersaoNova, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(76, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbVersao1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lbVersao)
                    .addComponent(lbVersaoNova)
                    .addComponent(lbVersao2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, " Processamento ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

        lbStatus.setBackground(new java.awt.Color(255, 255, 255));
        lbStatus.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lbStatus.setText("lbStatus");

        jpProgress.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jpProgress.setForeground(new java.awt.Color(0, 0, 0));
        jpProgress.setToolTipText("");
        jpProgress.setPreferredSize(new java.awt.Dimension(150, 11));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jpProgress, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lbStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(lbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jpProgress, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(1, 1, 1))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 192, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JProgressBar jpProgress;
    private javax.swing.JLabel lbStatus;
    private javax.swing.JLabel lbVersao;
    private javax.swing.JLabel lbVersao1;
    private javax.swing.JLabel lbVersao2;
    private javax.swing.JLabel lbVersaoNova;
    // End of variables declaration//GEN-END:variables

    public static void processar(List<String> versoes, String versaoAtual) {

        UnzipFiles unzip = new UnzipFiles();

        int vAtual = Integer.parseInt(versaoAtual.replace(".", ""));

        for (String v : versoes) {

            int vRem = Integer.parseInt(v.replace(".", ""));

            if (vRem > vAtual) {
                progress.getJpProgress().setValue(0);
                progress.getJpProgress().setStringPainted(true);
                progress.repaint();
                progress.lbStatus.setText("Iniciando Download da nova versão...");
                progress.lbVersaoNova.setText(v);
                progress.repaint();
                util.sleep(4000);

                downloader.download(prop.readPropertie(EPropertie.URL_BASE_GIT), v,
                        prop.readPropertie(EPropertie.ARQUIVO_ZIP));
                unzip.unzip(prop.readPropertie(EPropertie.ARQUIVO_ZIP),
                        prop.readPropertie(EPropertie.LOCAL_ORIGEM));
                versaoAtual = v;

                progress.getJpProgress().setValue(0);
                progress.getJpProgress().setStringPainted(false);
                progress.lbStatus.setText("Extraindo arquivos...");
                progress.repaint();
                progress.getJpProgress().setIndeterminate(true);
                progress.repaint();

                if (vRem == 100) {

                    //execCommand("java -jar " + prop.readPropertie(EPropertie.LOCAL_ORIGEM) + "/" + prop.readPropertie(EPropertie.APLICATION_NAME));
                    util.sleep(5000);

                    unzip.createDir(prop.readPropertie(EPropertie.LOCAL_DESTINO));

                    unzip.copiar(prop.readPropertie(EPropertie.LOCAL_ORIGEM) + "/bancoqueijos.db",
                            prop.readPropertie(EPropertie.LOCAL_DESTINO) + "/bancoqueijos.db");

                    //execCommand("taskkill /FI \"WindowTitle eq Queijos*\"");
                }

                progress.lbStatus.setText("Atualizando banco de dados...");
                progress.lbVersao.setText(versaoAtual);
                progress.lbVersaoNova.setText("");
                progress.repaint();
                util.sleep(500);

                flywayDb.updateDataBase(prop.readPropertie(EPropertie.DATABASE_URL),
                        prop.readPropertie(EPropertie.DATABASE_USER),
                        prop.readPropertie(EPropertie.DATABASE_PASSWORD),
                        prop.readPropertie(EPropertie.DATABASE_SCRIPT_LOCATION));
                util.sleep(2000);

                progress.lbStatus.setText("Instalando nova versão...");
                progress.lbVersao.setText(versaoAtual);
                progress.lbVersaoNova.setText("");
                progress.repaint();
                unzip.copiar(prop.readPropertie(EPropertie.LOCAL_ORIGEM) + "/" + prop.readPropertie(EPropertie.APLICATION_NAME),
                        prop.readPropertie(EPropertie.LOCAL_DESTINO) + "/" + prop.readPropertie(EPropertie.APLICATION_NAME));

                util.sleep(2000);

                prop.setProperty(EPropertie.APLICATION_VERSION, versaoAtual);
                
                
                progress.lbStatus.setText("Removendo arquivos temporários...");
                progress.lbVersao.setText(versaoAtual);
                progress.lbVersaoNova.setText("");
                progress.repaint();
                util.sleep(2000);
                
                unzip.deleteDownloadedContent(prop.readPropertie(EPropertie.ARQUIVO_ZIP),
                        prop.readPropertie(EPropertie.LOCAL_ORIGEM));

                progress.lbStatus.setText("Versão " + versaoAtual + " atualziada com sucesso!");
                progress.lbVersao.setText(versaoAtual);
                progress.lbVersaoNova.setText("");
                progress.repaint();
                util.sleep(2000);

            }

        }

        progress.lbStatus.setText("Processo de atualização finalizado!");
        progress.lbVersao.setText(versaoAtual);
        progress.lbVersaoNova.setText("");
        progress.repaint();
        util.sleep(2000);

        progress.dispose();

    }

    public JProgressBar getJpProgress() {
        return jpProgress;
    }

    public JLabel getLbStatus() {
        return lbStatus;
    }

    public JLabel getLbVersao() {
        return lbVersao;
    }

    public JLabel getLbVersaoNova() {
        return lbVersaoNova;
    }

    public void setJpProgress(JProgressBar jpProgress) {
        this.jpProgress = jpProgress;
    }

    public void setLbStatus(JLabel lbStatus) {
        this.lbStatus = lbStatus;
    }

    public void setLbVersao(JLabel lbVersao) {
        this.lbVersao = lbVersao;
    }

    public void setLbVersaoNova(JLabel lbVersaoNova) {
        this.lbVersaoNova = lbVersaoNova;
    }

    public static void execCommand(String command) {

        Runtime runTime = Runtime.getRuntime();
        try {
            Process process = runTime.exec(command);
        } catch (IOException ex) {
            Logger.getLogger(Progress.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

}
